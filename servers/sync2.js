// Generated by CoffeeScript 1.8.0
(function() {
  var CreateNote, Evernote, GetContent, Note, SyncStatus, Tags, async, cheerio, client, eqArr, noteStore, sync, uniq;

  Evernote = require('evernote').Evernote;

  async = require('async');

  client = require('../servers/ervernote');

  noteStore = client.getNoteStore('https://app.yinxiang.com/shard/s5/notestore');

  Note = require('../models/note');

  Tags = require('../models/tags');

  SyncStatus = require('../models/sync_status');

  uniq = require('uniq');

  cheerio = require('cheerio');

  eqArr = require('./help').eqArr;

  sync = (function() {
    function sync() {
      this.guid = 'bd6d5877-9ff8-400d-9d83-f6c4baeb2406';
      this.filterNote = new Evernote.NoteFilter();
      this.filterNote.notebookGuid = this.guid;
      this.reParams = new Evernote.NotesMetadataResultSpec();
      this.reParams.includeTitle = true;
      this.reParams.includeCreated = true;
      this.reParams.includeUpdated = true;
      this.reParams.includeDeleted = true;
      this.reParams.includeTagGuids = true;
      this.reParams.includeNotebookGuid = true;
    }

    sync.prototype.getPageCount = function(cb) {
      var self;
      self = this;
      return noteStore.findNoteCounts(this.filterNote, false, function(err, Info) {
        var countNoteNum, page;
        if (err) {
          return cb(err);
        }
        countNoteNum = info.notebookCounts[self.guid];
        page = Math.ceil(countNoteNum / 50);
        return cb(null, page);
      });
    };

    sync.prototype.syncInfo = function(offset, max, cb) {
      var self;
      self = this;
      return async.auto({
        getNote: function(callback) {
          noteStore.findNotesMetadata(self.filterNote, offset, max, self.reParams, function(err, info) {});
          if (err) {
            return cb(err);
          }
          return callback(null, info);
        },
        upNote: function(callback, result) {
          var noteArr;
          return noteArr = result.getNote;
        }
      });
    };

    sync.prototype.upNoteInfo = function(item, cb) {
      var self;
      self = this;
      return async.auto({
        findNote: function(callback) {
          return Note.findOne({
            guid: item.guid
          }, function(err, note) {
            if (err) {
              return callback(err);
            }
            return cb(null, note);
          });
        },
        composeUp: function(callback, result) {
          var cggc, note;
          note = result.findNote;
          if (!note) {
            cggc = async.compose(self.changeImgHtml, self.getTagName, self.getContent, self.createNote);
            return cggc(note);
          }
        }
      });
    };

    sync.prototype.createNote = function(noteInfo, cb) {
      var newNote;
      newNote = new Note();
      newNote.guid = noteInfo.guid;
      newNote.title = noteInfo.title;
      newNote.content = noteInfo.content;
      newNote.created = noteInfo.created;
      newNote.updated = noteInfo.updated;
      newNote.tagGuids = noteInfo.tagGuids;
      newNote.notebookGuid = noteInfo.notebookGuid;
      return cb(null, newNote);
    };

    sync.prototype.getContent = function(note, cb) {
      return noteStore.getNoteContent(note.guid, function(err, content) {
        if (err) {
          return cb(err);
        }
        if (note.content !== content) {
          note.content = content;
        }
        return cb(null, note);
      });
    };

    sync.prototype.getTagName = function(note, cb) {
      return noteStore.getNoteTagNames(note.guid, function(err, tagsName) {
        if (err) {
          return cb(err);
        }
        if (!eqArr(note.tags, tagsName)) {
          note.tags = tagsName;
        }
        return cb(null, note);
      });
    };

    sync.prototype.upbaseInfo = function(note, upInfo, cb) {
      var k, v;
      for (v in upInfo) {
        k = upInfo[v];
        note[k] = v;
      }
      return cb(null, note);
    };

    sync.prototype.changeImgHtml = function(note, cb) {
      var $, all_media;
      $ = cheerio.load(note.content);
      all_media = $('en-media');
      return async.eachSeries(all_media, function(item, callback) {
        var newTag;
        if (err) {
          return console.log(err);
        }
        newTag = $("<img src=/images/" + (item.attribs.hash + MIME_TO_EXTESION_MAPPING[item.attribs.type]) + ">");
        $(item).replaceWith(newTag);
        return callback();
      }, function(eachErr) {
        if (eachErr) {
          return cb(eachErr);
        }
        note.htmlContent = $.html();
        return cb(null, note);
      });
    };

    return sync;

  })();

  CreateNote = (function() {
    function CreateNote(noteInfo) {
      this.noteInfo = noteInfo;
    }

    CreateNote.prototype.save = function(cb) {
      var newNote;
      newNote = new Note();
      newNote.guid = this.noteInfo.guid;
      newNote.title = this.noteInfo.title;
      newNote.content = this.noteInfo.content;
      newNote.created = this.noteInfo.created;
      newNote.updated = this.noteInfo.updated;
      newNote.tagGuids = this.noteInfo.tagGuids;
      newNote.notebookGuid = this.noteInfo.notebookGuid;
      return newNote.save(function(err, row) {
        if (err) {
          return cb(err);
        }
        return cb(null, row);
      });
    };

    return CreateNote;

  })();

  GetContent = (function() {
    function GetContent(noteInfo) {
      this.noteInfo = noteInfo;
      GetContent.__super__.constructor.apply(this, arguments);
    }

    GetContent.prototype.get = function(cb) {};

    return GetContent;

  })();

}).call(this);

//# sourceMappingURL=sync2.js.map
