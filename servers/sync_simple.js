// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, Note, SyncNewNote, SyncStatus, async, client, eqArr, noteStore;

  Evernote = require('evernote').Evernote;

  async = require('async');

  client = require('../servers/ervernote');

  noteStore = client.getNoteStore('https://app.yinxiang.com/shard/s5/notestore');

  Note = require('../models/note');

  SyncStatus = require('../models/sync_status');

  eqArr = require('./help').eqArr;

  SyncNewNote = function() {
    this.guid = 'bd6d5877-9ff8-400d-9d83-f6c4baeb2406';
    this.filterNote = new Evernote.NoteFilter();
    this.filterNote.notebookGuid = this.guid;
    this.countNoteNum = 0;
    this.needSync = false;
    this.serverSync = null;
    this.reParams = new Evernote.NotesMetadataResultSpec();
    this.reParams.includeTitle = true;
    this.reParams.includeCreated = true;
    this.reParams.includeUpdated = true;
    this.reParams.includeDeleted = true;
    this.reParams.includeTagGuids = true;
    this.reParams.includeNotebookGuid = true;
  };

  SyncNewNote.prototype.checkStatus = function(cb) {
    var self;
    self = this;
    return async.auto({
      getServerStatus: function(callback) {
        return noteStore.getSyncState(function(err, info) {
          if (err) {
            return callback(err);
          }
          return callback(null, info);
        });
      },
      getDbStatusInfo: function(callback) {
        return self.getDbStatus(function(err, row) {
          if (err) {
            return callback(err);
          }
          return callback(null, row);
        });
      },
      compareStatus: [
        'getServerStatus', 'getDbStatusInfo', function(callback, result) {
          var dbInfo, serverInfo;
          serverInfo = result.getServerStatus;
          dbInfo = result.getDbStatusInfo;
          console.log("serverInfo", serverInfo);
          console.log("dbInfo", dbInfo);
          if (serverInfo.updateCount !== dbInfo.updateCount) {
            return self.updateStatus(serverInfo, dbInfo, function(err, row) {
              if (err) {
                return callback(err);
              }
              self.needSync = true;
              return callback();
            });
          } else {
            return callback();
          }
        }
      ]
    }, function(autoErr) {
      if (autoErr) {
        return cb(autoErr);
      }
      return cb();
    });
  };

  SyncNewNote.prototype.updateStatus = function(s, d, cb) {
    d.currentTime = s.currentTime;
    d.fullSyncBefore = s.fullSyncBefore;
    d.updateCount = s.updateCount;
    d.uploaded = s.uploaded;
    return d.save(function(err, row) {
      if (err) {
        return cb(err);
      }
      return cb(null, row);
    });
  };

  SyncNewNote.prototype.getDbStatus = function(cb) {
    return SyncStatus.findOne(function(err, row) {
      var newStatus;
      if (err) {
        return cb(err);
      }
      if (!row) {
        newStatus = new SyncStatus();
        return newStatus.save(function(sErr, newStatus) {
          if (sErr) {
            return cb(sErr);
          }
          return cb(null, newStatus);
        });
      } else {
        return cb(null, row);
      }
    });
  };

  SyncNewNote.prototype.getNoteCount = function(cb) {
    var self;
    self = this;
    return noteStore.findNoteCounts(this.filterNote, false, function(err, info) {
      if (err) {
        return cb(err);
      } else {
        self.countNoteNum = info.notebookCounts[self.guid];
        self.page = Math.ceil(self.countNoteNum / 50);
        console.log(".......................");
        console.log(info);
        console.log("countNoteNum ==>", self.countNoteNum);
        console.log("page ==>", self.page);
        console.log(".......................");
        return cb();
      }
    });
  };

  SyncNewNote.prototype.syncInfo = function(offset, max, fun) {
    var self;
    self = this;
    return async.auto({
      getSimpleInfo: function(cb) {
        return noteStore.findNotesMetadata(self.filterNote, offset, max, self.reParams, function(err, info) {
          if (err) {
            return cb(err);
          }
          console.log("findNotesMetadata offset", offset);
          console.log(info);
          return cb(null, info.notes);
        });
      },
      checkNew: [
        'getSimpleInfo', function(cb, result) {
          var simpleArr;
          simpleArr = result.getSimpleInfo;
          return self.checkSimpleNote(simpleArr, function(err) {
            if (err) {
              return cb(err);
            }
            return cb();
          });
        }
      ]
    }, function(autoErr) {
      if (autoErr) {
        return fun(autoErr);
      }
      console.log("in here");
      return fun();
    });
  };

  SyncNewNote.prototype.checkSimpleNote = function(simpleArr, cb) {
    var self;
    console.log("checkSimpleNote");
    self = this;
    return async.eachSeries(simpleArr, function(item, callback) {
      return Note.findOne({
        'guid': item.guid
      }, function(findErr, note) {
        if (findErr) {
          return callback(findErr);
        }
        if (!note) {
          return self.createNote(item, function(cErr, newNote) {
            console.log("new note", newNote.title);
            if (cErr) {
              return callback(cErr);
            }
            return callback();
          });
        } else {
          console.log("up note title ==>", note.title);
          return self.updateNote(note, item, function(uErr, upNote) {
            if (uErr) {
              return callback(uErr);
            }
            return callback();
          });
        }
      });
    }, function(eachErr) {
      if (eachErr) {
        return cb(eachErr);
      }
      return cb();
    });
  };

  SyncNewNote.prototype.updateNote = function(note, upInfo, cb) {
    var self;
    self = this;
    return async.auto({
      updateNoteBase: function(callback) {
        return self.updateNoteBase(note, upInfo, function(err, note1) {
          if (err) {
            return callback(err);
          }
          return callback(null, note1);
        });
      },
      updateNoteContent: [
        'updateNoteBase', function(callback, result) {
          note = result.updateNoteBase;
          return self.updateNoteContent(note, function(err, note2) {
            if (err) {
              return callback(err);
            }
            return callback(null, note2);
          });
        }
      ],
      updateNoteTagName: [
        'updateNoteContent', function(callback, result) {
          note = result.updateNoteContent;
          return self.updateNoteTagName(note, function(err, note3) {
            if (err) {
              return callback(err);
            }
            return callback(null, note3);
          });
        }
      ]
    }, function(autoErr) {
      if (autoErr) {
        return cb(autoErr);
      }
      return cb();
    });
  };

  SyncNewNote.prototype.updateNoteBase = function(note, upInfo, cb) {
    var baseUp, i, upBase, _i, _len;
    baseUp = ['title', 'created', 'updated', 'deleted', 'tagGuids', 'notebookGuid'];
    upBase = false;
    for (_i = 0, _len = baseUp.length; _i < _len; _i++) {
      i = baseUp[_i];
      if (note[i] !== upInfo[i]) {
        note[i] = upInfo[i];
        upBase = true;
      }
    }
    if (upBase) {
      return note.save(function(err, row) {
        if (err) {
          return cb(err);
        }
        return cb(null, row);
      });
    } else {
      return cb(null, note);
    }
  };

  SyncNewNote.prototype.updateNoteContent = function(note, cb) {
    return noteStore.getNoteContent(note.guid, function(err, content) {
      if (err) {
        return cb(err);
      }
      if (note.content !== content) {
        note.content = content;
        return note.save(function(sErr, row) {
          if (sErr) {
            return cb(sErr);
          }
          return cb(null, row);
        });
      } else {
        return cb(null, note);
      }
    });
  };

  SyncNewNote.prototype.updateNoteTagName = function(note, cb) {
    console.log("up note tag =========", note.title);
    return noteStore.getNoteTagNames(note.guid, function(err, tagArr) {
      console.log(tagArr);
      if (err) {
        return cb(err);
      }
      if (eqArr(note.tags, tagArr)) {
        return cb(null, note);
      } else {
        note.tags = tagArr;
        return note.save(function(sErr, row) {
          if (sErr) {
            return cb(sErr);
          }
          return cb(null, row);
        });
      }
    });
  };

  SyncNewNote.prototype.createNote = function(simpleInfo, cb) {
    var newNote, self;
    self = this;
    newNote = new Note();
    newNote.title = simpleInfo.title;
    newNote.guid = simpleInfo.guid;
    newNote.created = simpleInfo.created;
    newNote.updated = simpleInfo.updated;
    newNote.deleted = simpleInfo.deleted;
    newNote.tagGuids = simpleInfo.tagGuids;
    newNote.notebookGuid = simpleInfo.notebookGuid;
    return newNote.save(function(sErr, note) {
      if (sErr) {
        return cb(sErr);
      }
      return self.getNoteContent(note, function(gErr, newNote) {
        if (gErr) {
          return cb(gErr);
        }
        return cb(null, newNote);
      });
    });
  };

  SyncNewNote.prototype.getNoteContent = function(note, cb) {
    return noteStore.getNoteContent(note.guid, function(err, content) {
      if (err) {
        return cb(err);
      }
      note.content = content;
      return note.save(function(sErr, newNote) {
        if (sErr) {
          return cb(sErr);
        }
        return cb(null, newNote);
      });
    });
  };

  module.exports = SyncNewNote;

}).call(this);

//# sourceMappingURL=sync_simple.js.map
