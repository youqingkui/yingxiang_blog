// Generated by CoffeeScript 1.10.0
(function() {
  var Note, RedisNote, Tags, async, getLocalTime, help, redis, rn;

  redis = require('../models/redis');

  Note = require('../models/note');

  Tags = require('../models/tags');

  async = require('async');

  help = require('../servers/help');

  getLocalTime = help.getLocalTime;

  RedisNote = (function() {
    function RedisNote() {}

    RedisNote.prototype.getNote = function(cb) {
      return Note.find().sort('-created').exec(function(err, notes) {
        if (err) {
          return cb(err);
        }
        return cb(null, notes);
      });
    };

    RedisNote.prototype.getTags = function(cb) {
      return Tags.findOne(function(err, tags) {
        if (err) {
          return cb(err);
        }
        return cb(null, tags);
      });
    };

    RedisNote.prototype.getRecentNote = function(cb) {
      return Note.find().sort('-created').limit(4).exec(function(err, notes) {
        if (err) {
          return cb(err);
        }
        return cb(null, notes);
      });
    };

    RedisNote.prototype.cacheRecent = function(notes, cb) {
      var recentNote;
      recentNote = [];
      return async.each(notes, function(item, callback) {
        var noteJson;
        noteJson = {};
        noteJson.title = item.title;
        noteJson.guid = item.guid;
        recentNote.push(noteJson);
        return callback();
      }, function() {
        var jsonStr;
        jsonStr = JSON.stringify(recentNote);
        return redis.set('recentNote', jsonStr, function(err, res) {
          if (err) {
            return cb(err);
          }
          console.log("cache recent note ok");
          return cb();
        });
      });
    };

    RedisNote.prototype.cacheTags = function(tags, cb) {
      return redis.hmset('tags', {
        tags: tags.tags
      }, function(err, res) {
        if (err) {
          return cb(err);
        }
        console.log("cache tags ok");
        return cb();
      });
    };

    RedisNote.prototype.cacheNote = function(notes, cb) {
      return async.eachSeries(notes, function(item, callback) {
        var note;
        note = {
          title: item.title,
          htmlContent: item.htmlContent,
          created: getLocalTime(item.created / 1000),
          updated: getLocalTime(item.updated / 1000),
          tags: item.tags,
          guid: item.guid
        };
        return redis.hmset(item.guid, note, function(err, res) {
          if (err) {
            return callback(err);
          }
          return callback();
        });
      }, function(err) {
        if (err) {
          return cb(err);
        }
        console.log("cacheNote ok");
        return cb();
      });
    };

    RedisNote.prototype.cacheRedis = function() {
      var _this;
      _this = this;
      return async.auto({
        A: function(cb) {
          return _this.getNote(cb);
        },
        B: [
          'A', function(cb, result) {
            return _this.cacheNote(result.A, cb);
          }
        ],
        C: function(cb) {
          return _this.getTags(cb);
        },
        D: [
          'C', function(cb, res) {
            return _this.cacheTags(res.C, cb);
          }
        ],
        E: function(cb) {
          return _this.getRecentNote(cb);
        },
        F: [
          'E', function(cb, res) {
            return _this.cacheRecent(res.E, cb);
          }
        ]
      }, function(err) {
        if (err) {
          return console.log(err);
        }
        return console.log("cache ok");
      });
    };

    return RedisNote;

  })();

  rn = new RedisNote();

  rn.cacheRedis();

}).call(this);

//# sourceMappingURL=redis-note.js.map
