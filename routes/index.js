// Generated by CoffeeScript 1.8.0
(function() {
  var Evernote, Note, SyncNewNote, SyncStatus, Tags, async, client, express, getLocalTime, getYear, help, noteStore, router, toInt, uniq;

  express = require('express');

  router = express.Router();

  async = require('async');

  uniq = require('uniq');

  Evernote = require('evernote').Evernote;

  client = require('../servers/ervernote');

  noteStore = client.getNoteStore('https://app.yinxiang.com/shard/s5/notestore');

  Note = require('../models/note');

  Tags = require('../models/tags');

  SyncStatus = require('../models/sync_status');

  SyncNewNote = require('../servers/sync_simple');

  help = require('../servers/help');

  getLocalTime = help.getLocalTime;

  getYear = help.getYear;

  toInt = help.toInt;


  /* GET home page. */

  router.get('/', function(req, res, next) {
    var count, page;
    page = toInt(req.param('page'));
    if (page <= 0 || !page) {
      page = 1;
    }
    count = 0;
    return async.auto({
      getCount: function(cb) {
        return Note.count(function(err, number) {
          if (err) {
            return console.log(err);
          }
          console.log("count note ==>", number);
          count = Math.ceil(number / 10);
          console.log("1");
          return cb();
        });
      },
      pageNote: function(cb) {
        return Note.find().sort('-created').skip(10 * (page - 1)).limit(10).exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          console.log("2");
          return cb(null, notes);
        });
      },
      getRecentNote: function(cb) {
        return Note.find().sort('-created').limit(4).exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          return cb(null, notes);
        });
      },
      getTags: function(cb) {
        return Tags.findOne(function(err, tags) {
          if (err) {
            return console.log(err);
          }
          return cb(null, tags);
        });
      }
    }, function(err, result) {
      if (err) {
        return console.log(err);
      }
      console.log(result.getTags);
      return res.render('index', {
        notes: result.pageNote,
        currPage: page,
        countPage: count,
        getLocalTime: getLocalTime,
        recentNote: result.getRecentNote,
        tags: result.getTags.tags
      });
    });
  });

  router.get('/page/:page', function(req, res) {
    var count, page;
    page = toInt(req.params.page);
    if (page <= 0) {
      page = 1;
    }
    count = 0;
    return async.auto({
      getCount: function(cb) {
        return Note.count(function(err, number) {
          if (err) {
            return console.log(err);
          }
          console.log("count note ==>", number);
          count = Math.ceil(number / 10);
          console.log("1");
          return cb();
        });
      },
      pageNote: function(cb) {
        return Note.find().sort('-created').skip(10 * (page - 1)).limit(10).exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          console.log("2");
          return cb(null, notes);
        });
      }
    }, function(err, result) {
      if (err) {
        return console.log(err);
      }
      console.log(getLocalTime(123333));
      return res.render('index', {
        notes: result.pageNote,
        currPage: page,
        countPage: count,
        getLocalTime: getLocalTime
      });
    });
  });

  router.get('/note/:noteGuid', function(req, res) {
    var noteGuid;
    noteGuid = req.params.noteGuid;
    return async.auto({
      findNote: function(cb) {
        return Note.findOne({
          guid: noteGuid
        }, function(err, note) {
          if (err) {
            return console.log(err);
          }
          if (!note) {
            next();
          }
          return cb(null, note);
        });
      },
      recentNote: function(cb) {
        return Note.find().sort('-created').limit(4).exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          return cb(null, notes);
        });
      },
      getTags: function(cb) {
        return Tags.findOne(function(err, tags) {
          if (err) {
            return console.log(err);
          }
          return cb(null, tags);
        });
      }
    }, function(autoErr, result) {
      if (autoErr) {
        return console.log(autoErr);
      }
      console.log(result.getTags);
      return res.render('note', {
        note: result.findNote,
        getLocalTime: getLocalTime,
        recentNote: result.recentNote,
        tags: result.getTags.tags
      });
    });
  });

  router.get('/tag/:tag/', function(req, res, next) {
    var query, tag;
    tag = req.params.tag.trim();
    query = "this.tags.indexOf('" + tag + "') > -1";
    return async.auto({
      findNotes: function(cb) {
        return Note.find({}, {
          'title': 1,
          'guid': 1,
          'tags': 1,
          'updated': 1,
          'created': 1
        }).where({
          $where: query
        }).sort('-created').exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          if (!notes.length) {
            return next();
          }
          return cb(null, notes);
        });
      },
      getTags: function(cb) {
        return Tags.findOne(function(err, tags) {
          if (err) {
            return console.log(err);
          }
          return cb(null, tags);
        });
      }
    }, function(autoErr, result) {
      if (autoErr) {
        return console.log(autoErr);
      }
      return res.render('tags_note', {
        notes: result.findNotes,
        tag: tag,
        getLocalTime: getLocalTime,
        tags: result.getTags.tags
      });
    });
  });

  router.get('/archive', function(req, res) {
    return async.auto({
      getNotes: function(cb) {
        return Note.find({}, {
          'guid': 1,
          'created': 1,
          'title': 1
        }).sort('-created').exec(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          return cb(null, notes);
        });
      },
      getYear: [
        'getNotes', function(cb, result) {
          var archive, notes;
          notes = result.getNotes;
          archive = {};
          return async.eachSeries(notes, function(item, callback) {
            var year;
            year = getYear(item.created);
            if (!archive[year]) {
              console.log("year ==>", year);
              archive[year] = [];
              archive[year].push(item);
            } else {
              archive[year].push(item);
            }
            return callback();
          }, function(eachErr) {
            if (eachErr) {
              return console.log(eachErr);
            }
            console.log(archive);
            return res.render('archive', {
              'archive': archive,
              getLocalTime: getLocalTime
            });
          });
        }
      ]
    });
  });

  router.get('/get_note_tag', function(req, res) {
    return async.auto({
      getNote: function(cb) {
        return Note.find(function(err, notes) {
          if (err) {
            return console.log(err);
          }
          return cb(null, notes);
        });
      },
      getTagName: [
        'getNote', function(cb, result) {
          var notes;
          notes = result.getNote;
          return async.eachSeries(notes, function(item, callback) {
            return noteStore.getNoteTagNames(item.guid, function(err, tags) {
              if (err) {
                return console.log(err);
              }
              item.tags = tags;
              return item.save(function(err, note) {
                if (err) {
                  return console.log(err);
                }
                console.log("" + note.title + " tag ==> " + tags);
                return callback();
              });
            });
          }, function(eachErr) {
            if (eachErr) {
              return console.log(eachErr);
            }
            return res.send("get tag ok");
          });
        }
      ]
    });
  });

  router.get('/create_tags', function(req, res) {
    return Note.find({}, {
      'tags': 1
    }).exec(function(err, notes) {
      var note, t, tags, _i, _j, _len, _len1, _ref;
      if (err) {
        return console.log(err);
      }
      tags = [];
      for (_i = 0, _len = notes.length; _i < _len; _i++) {
        note = notes[_i];
        _ref = note.tags;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          t = _ref[_j];
          tags.push(t);
        }
      }
      tags = uniq(tags);
      return Tags.findOne(function(err, info) {
        var newTag;
        if (err) {
          return console.log(err);
        }
        if (!info) {
          newTag = new Tags();
          newTag.tags = tags;
          return newTag.save(function(err, row) {
            if (err) {
              return console.log(err);
            }
            console.log("ok save tages", row);
            return res.send("create_tags ok");
          });
        } else {
          console.log("tag has");
          return res.send("tags already exits");
        }
      });
    });
  });

  router.get('/new_note', function(req, res) {
    var sync;
    sync = new SyncNewNote();
    return async.series([
      function(cb) {
        return sync.getNoteCount(function(err) {
          if (err) {
            return cb(err);
          }
          return cb();
        });
      }, function(cb) {
        var loopNum, _i, _ref, _results;
        loopNum = (function() {
          _results = [];
          for (var _i = 0, _ref = sync.page; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        return async.eachSeries(loopNum, function(item, callback) {
          return sync.syncInfo(item * 50, 50, function(err) {
            if (err) {
              return callback(err);
            }
            return callback();
          });
        }, function(eachErr) {
          if (eachErr) {
            return cb(eachErr);
          }
          return cb();
        });
      }
    ], function(sErr) {
      console.log("here");
      if (sErr) {
        return console.log(sErr);
      }
      return res.send("sync new note ok");
    });
  });

  router.get('/status', function(req, res) {
    return noteStore.getSyncState(function(err, info) {
      if (err) {
        return console.log(err);
      }
      return console.log(info);
    });
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=index.js.map
